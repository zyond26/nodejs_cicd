const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const { getConnection } = require('../database_sqlite');

// ƒêƒÉng k√Ω t√†i kho·∫£n
const register = async (req, res) => {
  try {
    const { email, password, full_name, phone, address } = req.body;
    console.log('üìù B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω:', { email, full_name });
    
    const db = getConnection();
    if (!db) {
      console.error('‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi database');
      return res.status(500).json({
        success: false,
        message: 'L·ªói k·∫øt n·ªëi database'
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    db.get('SELECT * FROM users WHERE email = ?', [email], async (err, existingUser) => {
      if (err) {
        console.error('‚ùå L·ªói ki·ªÉm tra email:', err);
        return res.status(500).json({
          success: false,
          message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
        });
      }

      if (existingUser) {
        return res.status(400).json({
          success: false,
          message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
        });
      }

      // M√£ h√≥a m·∫≠t kh·∫©u
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Th√™m user m·ªõi
      console.log('üíæ ƒêang th√™m user v√†o database...');
      db.run(
        'INSERT INTO users (email, password, full_name, phone, address) VALUES (?, ?, ?, ?, ?)',
        [email, hashedPassword, full_name, phone || null, address || null],
        function(err) {
          if (err) {
            console.error('‚ùå L·ªói th√™m user:', err);
            return res.status(500).json({
              success: false,
              message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
            });
          }

          const newUserId = this.lastID;
          console.log('‚úÖ User ƒë√£ ƒë∆∞·ª£c th√™m v·ªõi ID:', newUserId);

          // T·∫°o JWT token
          const token = jwt.sign(
            { userId: newUserId, email: email },
            process.env.JWT_SECRET,
            { expiresIn: process.env.JWT_EXPIRES_IN }
          );

          res.status(201).json({
            success: true,
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
            data: {
              user: {
                id: newUserId,
                email: email,
                full_name: full_name,
                created_at: new Date().toISOString()
              },
              token
            }
          });
        }
      );
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const db = getConnection();

    // T√¨m user theo email
    db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
      if (err) {
        console.error('‚ùå L·ªói t√¨m user:', err);
        return res.status(500).json({
          success: false,
          message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
        });
      }

      if (!user) {
        return res.status(401).json({
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
        });
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return res.status(401).json({
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
        });
      }

      // T·∫°o JWT token
      const token = jwt.sign(
        { userId: user.id, email: user.email },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_EXPIRES_IN }
      );

      res.json({
        success: true,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
        data: {
          user: {
            id: user.id,
            email: user.email,
            full_name: user.full_name,
            phone: user.phone,
            avatar: user.avatar,
            address: user.address,
            created_at: user.created_at
          },
          token
        }
      });
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
const getProfile = async (req, res) => {
  try {
    const db = getConnection();
    
    db.get(
      'SELECT id, email, full_name, phone, avatar, address, created_at FROM users WHERE id = ?',
      [req.user.userId],
      (err, user) => {
        if (err) {
          console.error('‚ùå L·ªói l·∫•y profile:', err);
          return res.status(500).json({
            success: false,
            message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
          });
        }

        if (!user) {
          return res.status(404).json({
            success: false,
            message: 'Kh√¥ng t√¨m th·∫•y user'
          });
        }

        res.json({
          success: true,
          data: user
        });
      }
    );

  } catch (error) {
    console.error('L·ªói l·∫•y profile:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin user
const updateProfile = async (req, res) => {
  try {
    const { full_name, phone, address } = req.body;
    const db = getConnection();

    db.run(
      'UPDATE users SET full_name = ?, phone = ?, address = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
      [full_name, phone, address, req.user.userId],
      function(err) {
        if (err) {
          console.error('‚ùå L·ªói c·∫≠p nh·∫≠t profile:', err);
          return res.status(500).json({
            success: false,
            message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
          });
        }

        if (this.changes === 0) {
          return res.status(404).json({
            success: false,
            message: 'Kh√¥ng t√¨m th·∫•y user'
          });
        }

        res.json({
          success: true,
          message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!'
        });
      }
    );

  } catch (error) {
    console.error('L·ªói c·∫≠p nh·∫≠t profile:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// Qu√™n m·∫≠t kh·∫©u - G·ª≠i email reset
const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const db = getConnection();

    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    db.get('SELECT id, email, full_name FROM users WHERE email = ?', [email], async (err, user) => {
      if (err) {
        console.error('‚ùå L·ªói ki·ªÉm tra email:', err);
        return res.status(500).json({
          success: false,
          message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
        });
      }

      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
        });
      }

      // T·∫°o token reset password (c√≥ th·ªùi h·∫°n 1 gi·ªù)
      const resetToken = jwt.sign(
        { userId: user.id, email: user.email },
        process.env.JWT_SECRET,
        { expiresIn: '1h' }
      );

      // C·∫•u h√¨nh email transporter (s·ª≠ d·ª•ng Gmail)
      const transporter = nodemailer.createTransporter({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER, // Email Gmail c·ªßa b·∫°n
          pass: process.env.EMAIL_PASS  // App password c·ªßa Gmail
        }
      });

      // N·ªôi dung email
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Food Delivery App',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #ff6600;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
            <p>Xin ch√†o <strong>${user.full_name || 'Ng∆∞·ªùi d√πng'}</strong>,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Food Delivery App.</p>
            <p>Vui l√≤ng click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
            <div style="text-align: center; margin: 30px 0;">
              <a href="exp://192.168.1.101:8081/--/reset-password?token=${resetToken}" 
                 style="background-color: #ff6600; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
              </a>
            </div>
            <p><strong>L∆∞u √Ω:</strong></p>
            <ul>
              <li>Link n√†y c√≥ hi·ªáu l·ª±c trong 1 gi·ªù</li>
              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
              <li>ƒê·ªÉ b·∫£o m·∫≠t, vui l√≤ng kh√¥ng chia s·∫ª link n√†y v·ªõi ai kh√°c</li>
            </ul>
            <hr style="margin: 30px 0;">
            <p style="color: #666; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Food Delivery App.<br>
              Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        `
      };

      // G·ª≠i email
      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error('‚ùå L·ªói g·ª≠i email:', error);
          return res.status(500).json({
            success: false,
            message: 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.'
          });
        }

        console.log('‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i:', info.messageId);
        res.json({
          success: true,
          message: 'Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email c·ªßa b·∫°n!'
        });
      });
    });

  } catch (error) {
    console.error('L·ªói qu√™n m·∫≠t kh·∫©u:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// Reset m·∫≠t kh·∫©u v·ªõi token
const resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    // X√°c th·ª±c token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const db = getConnection();

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    db.get('SELECT id FROM users WHERE id = ?', [decoded.userId], async (err, user) => {
      if (err) {
        console.error('‚ùå L·ªói ki·ªÉm tra user:', err);
        return res.status(500).json({
          success: false,
          message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
        });
      }

      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Token kh√¥ng h·ª£p l·ªá'
        });
      }

      // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
      db.run(
        'UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
        [hashedPassword, decoded.userId],
        function(err) {
          if (err) {
            console.error('‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:', err);
            return res.status(500).json({
              success: false,
              message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
            });
          }

          res.json({
            success: true,
            message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!'
          });
        }
      );
    });

  } catch (error) {
    console.error('L·ªói reset m·∫≠t kh·∫©u:', error);
    if (error.name === 'TokenExpiredError') {
      return res.status(400).json({
        success: false,
        message: 'Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.'
      });
    }
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

module.exports = {
  register,
  login,
  getProfile,
  updateProfile,
  forgotPassword,
  resetPassword
}; 